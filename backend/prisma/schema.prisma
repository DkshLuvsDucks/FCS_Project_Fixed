datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id                  Int         @id @default(autoincrement())
  email               String      @unique @db.VarChar(255)
  mobile              String?     @unique @db.VarChar(15)
  passwordHash        String      @db.Char(60)
  username            String      @unique @db.VarChar(50)
  role                UserRole    @default(USER)
  twoFactorEnabled    Boolean     @default(false)
  twoFactorSecret     String?     @db.VarChar(32)
  lastPasswordReset   DateTime?
  failedLoginAttempts Int         @default(0)
  lockedUntil         DateTime?
  isBanned            Boolean     @default(false)
  bannedAt            DateTime?
  bio                 String?     @db.Text
  userImage           String?     @db.VarChar(2048)
  walletBalance       Float       @default(0.0)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  lastLogin           DateTime?
  isPrivateAccount    Boolean     @default(false)
  isSeller            Boolean     @default(false)
  sellerVerificationDoc String?   @db.VarChar(2048)
  sellerStatus        String?     @db.VarChar(20) // PENDING, APPROVED, REJECTED
  emailVerified       Boolean     @default(false)
  phoneVerified       Boolean     @default(false)

  logins              Login[]
  posts               Post[]      @relation("UserPosts")
  sentMessages        Message[]   @relation("SentMessages")
  receivedMessages    Message[]   @relation("ReceivedMessages")
  chatRoomsAsUser1    ChatRoom[]  @relation("user1")
  chatRoomsAsUser2    ChatRoom[]  @relation("user2")
  conversationsAsUser1 Conversation[] @relation("ConversationsAsUser1")
  conversationsAsUser2 Conversation[] @relation("ConversationsAsUser2")
  sessions            Session[]
  followers           Follows[]   @relation("following")
  following           Follows[]   @relation("followers")
  
  // Group chat relations
  groupMemberships    GroupMember[]
  sentGroupMessages   GroupMessage[] @relation("SentGroupMessages")
  ownedGroups         GroupChat[]    @relation("GroupOwner")
  
  // Post interactions
  likes               Like[]
  comments            Comment[]
  savedPosts          SavedPost[]
  
  // Marketplace relations
  wallet              Wallet?
  listedProducts      Product[]
  purchases           Order[]     @relation("BuyerOrders")
  sales               Order[]     @relation("SellerOrders")
  transactions        Transaction[]
  
  // Verification
  verificationCodes   VerificationCode[]
}

model Login {
  id                Int       @id @default(autoincrement())
  user              User      @relation(fields: [userId], references: [id])
  userId            Int
  sessionId         String    @db.VarChar(128)
  loginTime         DateTime  @default(now())
  ipAddress         String    @db.VarChar(45)
  userAgent         String    @db.Text
  deviceFingerprint String    @db.VarChar(64)
  geoLocation       String?   @db.VarChar(50)
  successful        Boolean   @default(true)

  @@index([sessionId])
  @@index([loginTime])
}

model Post {
  id             Int      @id @default(autoincrement())
  content        String   @db.Text
  mediaHash      String?  @db.Char(64)
  mediaUrl       String?  @db.VarChar(2048)  
  mediaType      String?  @db.VarChar(50)
  authorId       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  editHistory    String?  @db.Text
  isEncrypted    Boolean  @default(false)
  isPrivate      Boolean  @default(false)
  encryptionType String? @db.VarChar(20)
  iv             String?  @db.VarChar(24)
  
  // Relations
  author         User     @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  likes          Like[]   @relation("PostLikes")
  comments       Comment[] @relation("PostComments")
  savedBy        SavedPost[]
  mediaItems     MediaItem[]
  shared         Message[] @relation("SharedPosts")
  sharedInGroups GroupMessage[] @relation("SharedGroupPosts")
  
  // Indexes
  @@index([authorId])
}

// Model for post likes
model Like {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  post        Post      @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  createdAt   DateTime  @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Model for post comments
model Comment {
  id          Int       @id @default(autoincrement())
  content     String    @db.Text
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  post        Post      @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // For nested comments
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  parentId    Int?
  replies     Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
}

// Model for saved posts
model SavedPost {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  createdAt   DateTime  @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Model for post media items (multiple per post)
model MediaItem {
  id          Int       @id @default(autoincrement())
  mediaUrl    String    @db.VarChar(2048)
  mediaType   String    @db.VarChar(50)
  mediaHash   String?   @db.Char(64)
  position    Int       @default(0)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int

  @@index([postId])
}

model ChatRoom {
  id          Int       @id @default(autoincrement())
  user1       User      @relation("user1", fields: [user1Id], references: [id])
  user1Id     Int
  user2       User      @relation("user2", fields: [user2Id], references: [id])
  user2Id     Int
  createdAt   DateTime  @default(now())
  active      Boolean   @default(true)

  @@unique([user1Id, user2Id])
  @@index([createdAt])
}

model Message {
  id               Int       @id @default(autoincrement())
  senderId         Int
  createdAt        DateTime  @default(now())
  read             Boolean   @default(false)
  readAt           DateTime?
  receiverId       Int
  updatedAt        DateTime  @updatedAt
  algorithm        String?   @db.VarChar(255)
  encryptedContent String?   @db.Text
  hmac             String?   @db.Text
  iv               String?   @db.Text
  authTag          String?   @db.Text
  isEdited         Boolean   @default(false)
  editedAt         DateTime?
  deletedForReceiver Boolean  @default(false)
  deletedForSender Boolean   @default(false)
  content          String?   @db.Text
  mediaUrl         String?   @db.VarChar(2048)
  mediaType        String?   @db.VarChar(50)
  mediaEncrypted   Boolean   @default(false)
  isSystemMessage  Boolean   @default(false)
  replyToId        Int?
  replyTo          Message?  @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies          Message[] @relation("MessageReplies")
  sender           User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver         User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation     Conversation @relation(fields: [conversationId], references: [id])
  conversationId   Int
  sharedPostId     Int?
  sharedPost       Post?     @relation("SharedPosts", fields: [sharedPostId], references: [id], onDelete: SetNull)

  @@index([senderId, receiverId])
  @@index([createdAt])
  @@index([replyToId])
  @@index([conversationId])
  @@index([sharedPostId])
}

model Session {
  id           String    @id @db.VarChar(128)
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  expiresAt    DateTime
  lastActivity DateTime  @default(now())
  userAgent    String    @db.Text
  ipAddress    String    @db.VarChar(45)

  @@index([expiresAt])
}

model Follows {
  follower    User     @relation("followers", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// New model for group chats
model GroupChat {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(100)
  description     String?       @db.Text
  groupImage      String?       @db.VarChar(2048)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Owner/creator relationship
  ownerId         Int
  owner           User          @relation("GroupOwner", fields: [ownerId], references: [id])
  
  // Related models
  members         GroupMember[]
  messages        GroupMessage[]

  @@index([createdAt])
  @@index([ownerId])
}

// Model for group membership with roles
model GroupMember {
  id              Int           @id @default(autoincrement())
  userId          Int
  groupId         Int
  isAdmin         Boolean       @default(false)
  joinedAt        DateTime      @default(now())
  lastReadMessageId Int?
  
  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  group           GroupChat     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  lastReadMessage GroupMessage? @relation("LastReadMessage", fields: [lastReadMessageId], references: [id], onDelete: SetNull)

  @@unique([userId, groupId])
  @@index([groupId])
}

// Model for messages in group chats
model GroupMessage {
  id               Int          @id @default(autoincrement())
  content          String?      @db.Text
  senderId         Int
  groupId          Int
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  isEdited         Boolean      @default(false)
  isSystem         Boolean      @default(false)
  mediaUrl         String?      @db.VarChar(2048)
  mediaType        String?      @db.VarChar(50)
  mediaEncrypted   Boolean      @default(false)
  sharedPostId     Int?
  
  // For replies
  replyToId        Int?
  replyTo          GroupMessage? @relation("GroupMessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies          GroupMessage[] @relation("GroupMessageReplies")
  
  // Relations
  sender           User         @relation("SentGroupMessages", fields: [senderId], references: [id])
  group            GroupChat    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sharedPost       Post?        @relation("SharedGroupPosts", fields: [sharedPostId], references: [id], onDelete: SetNull)
  
  // Relation for last read
  readBy           GroupMember[] @relation("LastReadMessage")

  @@index([groupId, createdAt])
  @@index([senderId])
  @@index([replyToId])
  @@index([sharedPostId])
}

// Model for direct messaging conversations
model Conversation {
  id          Int       @id @default(autoincrement())
  user1       User      @relation("ConversationsAsUser1", fields: [user1Id], references: [id])
  user1Id     Int
  user2       User      @relation("ConversationsAsUser2", fields: [user2Id], references: [id])
  user2Id     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]

  @@unique([user1Id, user2Id])
  @@index([createdAt])
}

// Model for user wallet
model Wallet {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  balance     Float     @default(0.0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Model for marketplace products
model Product {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(100)
  description String    @db.Text
  price       Float
  category    String    @db.VarChar(50)
  condition   String    @db.VarChar(20) // NEW, LIKE_NEW, GOOD, FAIR, POOR
  quantity    Int       @default(1)
  status      String    @db.VarChar(20) // AVAILABLE, SOLD, RESERVED, DELETED
  sellerId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contactInfo String?   @db.Text
  paymentInfo String?   @db.Text
  
  // Relations
  seller      User      @relation(fields: [sellerId], references: [id])
  images      ProductImage[]
  orders      Order[]
  
  @@index([sellerId])
  @@index([category])
  @@index([status])
  @@index([createdAt])
}

// Model for product images
model ProductImage {
  id          Int       @id @default(autoincrement())
  productId   Int
  url         String    @db.VarChar(2048)
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  // Relations
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

// Model for marketplace orders
model Order {
  id          Int       @id @default(autoincrement())
  buyerId     Int
  sellerId    Int
  productId   Int
  price       Float
  status      String    @db.VarChar(20) // PENDING, COMPLETED, CANCELLED, REFUNDED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  buyer       User      @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller      User      @relation("SellerOrders", fields: [sellerId], references: [id])
  product     Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  transactions Transaction[]
  
  @@index([buyerId])
  @@index([sellerId])
  @@index([productId])
  @@index([createdAt])
}

// Model for financial transactions
model Transaction {
  id             Int       @id @default(autoincrement())
  userId         Int
  type           String    @db.VarChar(20) // DEPOSIT, WITHDRAWAL, PURCHASE, SALE, REFUND
  amount         Float
  description    String    @db.Text
  status         String    @db.VarChar(20) // PENDING, COMPLETED, FAILED, CANCELLED
  createdAt      DateTime  @default(now())
  orderId        Int?
  paymentDetails String?   @db.Text // Encrypted payment details
  
  // Relations
  user           User      @relation(fields: [userId], references: [id])
  order          Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([orderId])
  @@index([type])
  @@index([createdAt])
}

// Add after all other models
model VerificationCode {
  id        Int       @id @default(autoincrement())
  type      String    @db.VarChar(10) // EMAIL or MOBILE
  value     String    @db.VarChar(255) // email address or phone number
  code      String    @db.VarChar(10)
  expiresAt DateTime
  attempts  Int       @default(0)
  verified  Boolean   @default(false)
  createdAt DateTime  @default(now())
  
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  
  @@index([userId])
  @@index([type, value])
  @@index([expiresAt])
  @@index([code])
  @@unique([type, value], name: "type_value")
} 