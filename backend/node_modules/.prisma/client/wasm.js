
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.10.2
 * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
 */
Prisma.prismaVersion = {
  client: "5.10.2",
  engine: "5a9203d0590c951969e85a7d07215503f4672eb9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  mobile: 'mobile',
  passwordHash: 'passwordHash',
  username: 'username',
  role: 'role',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  lastPasswordReset: 'lastPasswordReset',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  isBanned: 'isBanned',
  bannedAt: 'bannedAt',
  bio: 'bio',
  userImage: 'userImage',
  walletBalance: 'walletBalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin',
  isPrivateAccount: 'isPrivateAccount',
  isSeller: 'isSeller',
  sellerVerificationDoc: 'sellerVerificationDoc',
  sellerStatus: 'sellerStatus',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified'
};

exports.Prisma.LoginScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  loginTime: 'loginTime',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceFingerprint: 'deviceFingerprint',
  geoLocation: 'geoLocation',
  successful: 'successful'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  mediaHash: 'mediaHash',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  authorId: 'authorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  editHistory: 'editHistory',
  isEncrypted: 'isEncrypted',
  isPrivate: 'isPrivate',
  encryptionType: 'encryptionType',
  iv: 'iv'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentId: 'parentId'
};

exports.Prisma.SavedPostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt'
};

exports.Prisma.MediaItemScalarFieldEnum = {
  id: 'id',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  mediaHash: 'mediaHash',
  position: 'position',
  postId: 'postId'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  user1Id: 'user1Id',
  user2Id: 'user2Id',
  createdAt: 'createdAt',
  active: 'active'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  createdAt: 'createdAt',
  read: 'read',
  readAt: 'readAt',
  receiverId: 'receiverId',
  updatedAt: 'updatedAt',
  algorithm: 'algorithm',
  encryptedContent: 'encryptedContent',
  hmac: 'hmac',
  iv: 'iv',
  authTag: 'authTag',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  deletedForReceiver: 'deletedForReceiver',
  deletedForSender: 'deletedForSender',
  content: 'content',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  mediaEncrypted: 'mediaEncrypted',
  isSystemMessage: 'isSystemMessage',
  replyToId: 'replyToId',
  conversationId: 'conversationId',
  sharedPostId: 'sharedPostId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expiresAt: 'expiresAt',
  lastActivity: 'lastActivity',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress'
};

exports.Prisma.FollowsScalarFieldEnum = {
  followerId: 'followerId',
  followingId: 'followingId',
  createdAt: 'createdAt'
};

exports.Prisma.GroupChatScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  groupImage: 'groupImage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.GroupMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  groupId: 'groupId',
  isAdmin: 'isAdmin',
  joinedAt: 'joinedAt',
  lastReadMessageId: 'lastReadMessageId'
};

exports.Prisma.GroupMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  senderId: 'senderId',
  groupId: 'groupId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isEdited: 'isEdited',
  isSystem: 'isSystem',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  mediaEncrypted: 'mediaEncrypted',
  sharedPostId: 'sharedPostId',
  replyToId: 'replyToId'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  user1Id: 'user1Id',
  user2Id: 'user2Id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  category: 'category',
  condition: 'condition',
  quantity: 'quantity',
  status: 'status',
  sellerId: 'sellerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contactInfo: 'contactInfo',
  paymentInfo: 'paymentInfo'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  sellerId: 'sellerId',
  productId: 'productId',
  price: 'price',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  orderId: 'orderId',
  paymentDetails: 'paymentDetails'
};

exports.Prisma.VerificationCodeScalarFieldEnum = {
  id: 'id',
  type: 'type',
  value: 'value',
  code: 'code',
  expiresAt: 'expiresAt',
  attempts: 'attempts',
  verified: 'verified',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  MODERATOR: 'MODERATOR',
  ADMIN: 'ADMIN'
};

exports.Prisma.ModelName = {
  User: 'User',
  Login: 'Login',
  Post: 'Post',
  Like: 'Like',
  Comment: 'Comment',
  SavedPost: 'SavedPost',
  MediaItem: 'MediaItem',
  ChatRoom: 'ChatRoom',
  Message: 'Message',
  Session: 'Session',
  Follows: 'Follows',
  GroupChat: 'GroupChat',
  GroupMember: 'GroupMember',
  GroupMessage: 'GroupMessage',
  Conversation: 'Conversation',
  Wallet: 'Wallet',
  Product: 'Product',
  ProductImage: 'ProductImage',
  Order: 'Order',
  Transaction: 'Transaction',
  VerificationCode: 'VerificationCode'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions or Edge Middleware',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
